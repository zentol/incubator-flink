/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: server.proto

package org.apache.flink.runtime.rpc.grpc;

import com.google.protobuf.AbstractParser;
import com.google.protobuf.ByteString;
import com.google.protobuf.CodedInputStream;
import com.google.protobuf.CodedOutputStream;
import com.google.protobuf.Descriptors;
import com.google.protobuf.ExtensionRegistry;
import com.google.protobuf.ExtensionRegistryLite;
import com.google.protobuf.GeneratedMessageV3;
import com.google.protobuf.InvalidProtocolBufferException;
import com.google.protobuf.Message;
import com.google.protobuf.MessageOrBuilder;
import com.google.protobuf.Parser;
import com.google.protobuf.UnknownFieldSet;

import java.io.IOException;
import java.io.InputStream;
import java.nio.ByteBuffer;

public final class ServerOuterClass {
    private ServerOuterClass() {}

    public static void registerAllExtensions(ExtensionRegistryLite registry) {}

    public static void registerAllExtensions(ExtensionRegistry registry) {
        registerAllExtensions((ExtensionRegistryLite) registry);
    }

    public interface PayloadOrBuilder
            extends
            // @@protoc_insertion_point(interface_extends:Payload)
            MessageOrBuilder {

        /** <code>bytes data = 1;</code> */
        ByteString getData();
    }
    /** Protobuf type {@code Payload} */
    public static final class Payload extends GeneratedMessageV3
            implements
            // @@protoc_insertion_point(message_implements:Payload)
            PayloadOrBuilder {
        // Use Payload.newBuilder() to construct.
        private Payload(GeneratedMessageV3.Builder<?> builder) {
            super(builder);
        }

        private Payload() {
            data_ = ByteString.EMPTY;
        }

        @Override
        public final UnknownFieldSet getUnknownFields() {
            return UnknownFieldSet.getDefaultInstance();
        }

        private Payload(CodedInputStream input, ExtensionRegistryLite extensionRegistry)
                throws InvalidProtocolBufferException {
            this();
            int mutable_bitField0_ = 0;
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        default:
                            {
                                if (!input.skipField(tag)) {
                                    done = true;
                                }
                                break;
                            }
                        case 10:
                            {
                                data_ = input.readBytes();
                                break;
                            }
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw new InvalidProtocolBufferException(e).setUnfinishedMessage(this);
            } finally {
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return ServerOuterClass.internal_static_Payload_descriptor;
        }

        protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
            return ServerOuterClass.internal_static_Payload_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(
                            ServerOuterClass.Payload.class, ServerOuterClass.Payload.Builder.class);
        }

        public static final int DATA_FIELD_NUMBER = 1;
        private ByteString data_;
        /** <code>bytes data = 1;</code> */
        public ByteString getData() {
            return data_;
        }

        private byte memoizedIsInitialized = -1;

        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;

            memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            if (!data_.isEmpty()) {
                output.writeBytes(1, data_);
            }
        }

        public int getSerializedSize() {
            int size = memoizedSize;
            if (size != -1) return size;

            size = 0;
            if (!data_.isEmpty()) {
                size += CodedOutputStream.computeBytesSize(1, data_);
            }
            memoizedSize = size;
            return size;
        }

        private static final long serialVersionUID = 0L;

        @Override
        public boolean equals(final Object obj) {
            if (obj == this) {
                return true;
            }
            if (!(obj instanceof ServerOuterClass.Payload)) {
                return super.equals(obj);
            }
            ServerOuterClass.Payload other = (ServerOuterClass.Payload) obj;

            boolean result = true;
            result = result && getData().equals(other.getData());
            return result;
        }

        @Override
        public int hashCode() {
            if (memoizedHashCode != 0) {
                return memoizedHashCode;
            }
            int hash = 41;
            hash = (19 * hash) + getDescriptor().hashCode();
            hash = (37 * hash) + DATA_FIELD_NUMBER;
            hash = (53 * hash) + getData().hashCode();
            hash = (29 * hash) + unknownFields.hashCode();
            memoizedHashCode = hash;
            return hash;
        }

        public static ServerOuterClass.Payload parseFrom(ByteBuffer data)
                throws InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static ServerOuterClass.Payload parseFrom(
                ByteBuffer data, ExtensionRegistryLite extensionRegistry)
                throws InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static ServerOuterClass.Payload parseFrom(ByteString data)
                throws InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static ServerOuterClass.Payload parseFrom(
                ByteString data, ExtensionRegistryLite extensionRegistry)
                throws InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static ServerOuterClass.Payload parseFrom(byte[] data)
                throws InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static ServerOuterClass.Payload parseFrom(
                byte[] data, ExtensionRegistryLite extensionRegistry)
                throws InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static ServerOuterClass.Payload parseFrom(InputStream input) throws IOException {
            return GeneratedMessageV3.parseWithIOException(PARSER, input);
        }

        public static ServerOuterClass.Payload parseFrom(
                InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return GeneratedMessageV3.parseWithIOException(PARSER, input, extensionRegistry);
        }

        public static ServerOuterClass.Payload parseDelimitedFrom(InputStream input)
                throws IOException {
            return GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input);
        }

        public static ServerOuterClass.Payload parseDelimitedFrom(
                InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return GeneratedMessageV3.parseDelimitedWithIOException(
                    PARSER, input, extensionRegistry);
        }

        public static ServerOuterClass.Payload parseFrom(CodedInputStream input)
                throws IOException {
            return GeneratedMessageV3.parseWithIOException(PARSER, input);
        }

        public static ServerOuterClass.Payload parseFrom(
                CodedInputStream input, ExtensionRegistryLite extensionRegistry)
                throws IOException {
            return GeneratedMessageV3.parseWithIOException(PARSER, input, extensionRegistry);
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(ServerOuterClass.Payload prototype) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
        }

        @Override
        protected Builder newBuilderForType(GeneratedMessageV3.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }
        /** Protobuf type {@code Payload} */
        public static final class Builder extends GeneratedMessageV3.Builder<Builder>
                implements
                // @@protoc_insertion_point(builder_implements:Payload)
                ServerOuterClass.PayloadOrBuilder {
            public static final Descriptors.Descriptor getDescriptor() {
                return ServerOuterClass.internal_static_Payload_descriptor;
            }

            protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
                return ServerOuterClass.internal_static_Payload_fieldAccessorTable
                        .ensureFieldAccessorsInitialized(
                                ServerOuterClass.Payload.class,
                                ServerOuterClass.Payload.Builder.class);
            }

            // Construct using
            // org.apache.flink.runtime.rpc.grpc.ServerOuterClass.Payload.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessageV3.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (GeneratedMessageV3.alwaysUseFieldBuilders) {}
            }

            public Builder clear() {
                super.clear();
                data_ = ByteString.EMPTY;

                return this;
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return ServerOuterClass.internal_static_Payload_descriptor;
            }

            public ServerOuterClass.Payload getDefaultInstanceForType() {
                return ServerOuterClass.Payload.getDefaultInstance();
            }

            public ServerOuterClass.Payload build() {
                ServerOuterClass.Payload result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            public ServerOuterClass.Payload buildPartial() {
                ServerOuterClass.Payload result = new ServerOuterClass.Payload(this);
                result.data_ = data_;
                onBuilt();
                return result;
            }

            public Builder clone() {
                return (Builder) super.clone();
            }

            public Builder setField(Descriptors.FieldDescriptor field, Object value) {
                return (Builder) super.setField(field, value);
            }

            public Builder clearField(Descriptors.FieldDescriptor field) {
                return (Builder) super.clearField(field);
            }

            public Builder clearOneof(Descriptors.OneofDescriptor oneof) {
                return (Builder) super.clearOneof(oneof);
            }

            public Builder setRepeatedField(
                    Descriptors.FieldDescriptor field, int index, Object value) {
                return (Builder) super.setRepeatedField(field, index, value);
            }

            public Builder addRepeatedField(Descriptors.FieldDescriptor field, Object value) {
                return (Builder) super.addRepeatedField(field, value);
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof ServerOuterClass.Payload) {
                    return mergeFrom((ServerOuterClass.Payload) other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(ServerOuterClass.Payload other) {
                if (other == ServerOuterClass.Payload.getDefaultInstance()) return this;
                if (other.getData() != ByteString.EMPTY) {
                    setData(other.getData());
                }
                onChanged();
                return this;
            }

            public final boolean isInitialized() {
                return true;
            }

            public Builder mergeFrom(
                    CodedInputStream input, ExtensionRegistryLite extensionRegistry)
                    throws IOException {
                ServerOuterClass.Payload parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (ServerOuterClass.Payload) e.getUnfinishedMessage();
                    throw e.unwrapIOException();
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }

            private ByteString data_ = ByteString.EMPTY;
            /** <code>bytes data = 1;</code> */
            public ByteString getData() {
                return data_;
            }
            /** <code>bytes data = 1;</code> */
            public Builder setData(ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }

                data_ = value;
                onChanged();
                return this;
            }
            /** <code>bytes data = 1;</code> */
            public Builder clearData() {

                data_ = getDefaultInstance().getData();
                onChanged();
                return this;
            }

            public final Builder setUnknownFields(final UnknownFieldSet unknownFields) {
                return this;
            }

            public final Builder mergeUnknownFields(final UnknownFieldSet unknownFields) {
                return this;
            }

            // @@protoc_insertion_point(builder_scope:Payload)
        }

        // @@protoc_insertion_point(class_scope:Payload)
        private static final ServerOuterClass.Payload DEFAULT_INSTANCE;

        static {
            DEFAULT_INSTANCE = new ServerOuterClass.Payload();
        }

        public static ServerOuterClass.Payload getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        private static final Parser<Payload> PARSER =
                new AbstractParser<Payload>() {
                    public Payload parsePartialFrom(
                            CodedInputStream input, ExtensionRegistryLite extensionRegistry)
                            throws InvalidProtocolBufferException {
                        return new Payload(input, extensionRegistry);
                    }
                };

        public static Parser<Payload> parser() {
            return PARSER;
        }

        @Override
        public Parser<Payload> getParserForType() {
            return PARSER;
        }

        public ServerOuterClass.Payload getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
        }
    }

    public interface EmptyOrBuilder
            extends
            // @@protoc_insertion_point(interface_extends:Empty)
            MessageOrBuilder {}
    /** Protobuf type {@code Empty} */
    public static final class Empty extends GeneratedMessageV3
            implements
            // @@protoc_insertion_point(message_implements:Empty)
            EmptyOrBuilder {
        // Use Empty.newBuilder() to construct.
        private Empty(GeneratedMessageV3.Builder<?> builder) {
            super(builder);
        }

        private Empty() {}

        @Override
        public final UnknownFieldSet getUnknownFields() {
            return UnknownFieldSet.getDefaultInstance();
        }

        private Empty(CodedInputStream input, ExtensionRegistryLite extensionRegistry)
                throws InvalidProtocolBufferException {
            this();
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        default:
                            {
                                if (!input.skipField(tag)) {
                                    done = true;
                                }
                                break;
                            }
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw new InvalidProtocolBufferException(e).setUnfinishedMessage(this);
            } finally {
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return ServerOuterClass.internal_static_Empty_descriptor;
        }

        protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
            return ServerOuterClass.internal_static_Empty_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(
                            ServerOuterClass.Empty.class, ServerOuterClass.Empty.Builder.class);
        }

        private byte memoizedIsInitialized = -1;

        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;

            memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output) throws IOException {}

        public int getSerializedSize() {
            int size = memoizedSize;
            if (size != -1) return size;

            size = 0;
            memoizedSize = size;
            return size;
        }

        private static final long serialVersionUID = 0L;

        @Override
        public boolean equals(final Object obj) {
            if (obj == this) {
                return true;
            }
            if (!(obj instanceof ServerOuterClass.Empty)) {
                return super.equals(obj);
            }
            ServerOuterClass.Empty other = (ServerOuterClass.Empty) obj;

            boolean result = true;
            return result;
        }

        @Override
        public int hashCode() {
            if (memoizedHashCode != 0) {
                return memoizedHashCode;
            }
            int hash = 41;
            hash = (19 * hash) + getDescriptor().hashCode();
            hash = (29 * hash) + unknownFields.hashCode();
            memoizedHashCode = hash;
            return hash;
        }

        public static ServerOuterClass.Empty parseFrom(ByteBuffer data)
                throws InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static ServerOuterClass.Empty parseFrom(
                ByteBuffer data, ExtensionRegistryLite extensionRegistry)
                throws InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static ServerOuterClass.Empty parseFrom(ByteString data)
                throws InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static ServerOuterClass.Empty parseFrom(
                ByteString data, ExtensionRegistryLite extensionRegistry)
                throws InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static ServerOuterClass.Empty parseFrom(byte[] data)
                throws InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static ServerOuterClass.Empty parseFrom(
                byte[] data, ExtensionRegistryLite extensionRegistry)
                throws InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static ServerOuterClass.Empty parseFrom(InputStream input) throws IOException {
            return GeneratedMessageV3.parseWithIOException(PARSER, input);
        }

        public static ServerOuterClass.Empty parseFrom(
                InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return GeneratedMessageV3.parseWithIOException(PARSER, input, extensionRegistry);
        }

        public static ServerOuterClass.Empty parseDelimitedFrom(InputStream input)
                throws IOException {
            return GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input);
        }

        public static ServerOuterClass.Empty parseDelimitedFrom(
                InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return GeneratedMessageV3.parseDelimitedWithIOException(
                    PARSER, input, extensionRegistry);
        }

        public static ServerOuterClass.Empty parseFrom(CodedInputStream input) throws IOException {
            return GeneratedMessageV3.parseWithIOException(PARSER, input);
        }

        public static ServerOuterClass.Empty parseFrom(
                CodedInputStream input, ExtensionRegistryLite extensionRegistry)
                throws IOException {
            return GeneratedMessageV3.parseWithIOException(PARSER, input, extensionRegistry);
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(ServerOuterClass.Empty prototype) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
        }

        @Override
        protected Builder newBuilderForType(GeneratedMessageV3.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }
        /** Protobuf type {@code Empty} */
        public static final class Builder extends GeneratedMessageV3.Builder<Builder>
                implements
                // @@protoc_insertion_point(builder_implements:Empty)
                ServerOuterClass.EmptyOrBuilder {
            public static final Descriptors.Descriptor getDescriptor() {
                return ServerOuterClass.internal_static_Empty_descriptor;
            }

            protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
                return ServerOuterClass.internal_static_Empty_fieldAccessorTable
                        .ensureFieldAccessorsInitialized(
                                ServerOuterClass.Empty.class, ServerOuterClass.Empty.Builder.class);
            }

            // Construct using org.apache.flink.runtime.rpc.grpc.ServerOuterClass.Empty.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessageV3.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (GeneratedMessageV3.alwaysUseFieldBuilders) {}
            }

            public Builder clear() {
                super.clear();
                return this;
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return ServerOuterClass.internal_static_Empty_descriptor;
            }

            public ServerOuterClass.Empty getDefaultInstanceForType() {
                return ServerOuterClass.Empty.getDefaultInstance();
            }

            public ServerOuterClass.Empty build() {
                ServerOuterClass.Empty result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            public ServerOuterClass.Empty buildPartial() {
                ServerOuterClass.Empty result = new ServerOuterClass.Empty(this);
                onBuilt();
                return result;
            }

            public Builder clone() {
                return (Builder) super.clone();
            }

            public Builder setField(Descriptors.FieldDescriptor field, Object value) {
                return (Builder) super.setField(field, value);
            }

            public Builder clearField(Descriptors.FieldDescriptor field) {
                return (Builder) super.clearField(field);
            }

            public Builder clearOneof(Descriptors.OneofDescriptor oneof) {
                return (Builder) super.clearOneof(oneof);
            }

            public Builder setRepeatedField(
                    Descriptors.FieldDescriptor field, int index, Object value) {
                return (Builder) super.setRepeatedField(field, index, value);
            }

            public Builder addRepeatedField(Descriptors.FieldDescriptor field, Object value) {
                return (Builder) super.addRepeatedField(field, value);
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof ServerOuterClass.Empty) {
                    return mergeFrom((ServerOuterClass.Empty) other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(ServerOuterClass.Empty other) {
                if (other == ServerOuterClass.Empty.getDefaultInstance()) return this;
                onChanged();
                return this;
            }

            public final boolean isInitialized() {
                return true;
            }

            public Builder mergeFrom(
                    CodedInputStream input, ExtensionRegistryLite extensionRegistry)
                    throws IOException {
                ServerOuterClass.Empty parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (ServerOuterClass.Empty) e.getUnfinishedMessage();
                    throw e.unwrapIOException();
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }

            public final Builder setUnknownFields(final UnknownFieldSet unknownFields) {
                return this;
            }

            public final Builder mergeUnknownFields(final UnknownFieldSet unknownFields) {
                return this;
            }

            // @@protoc_insertion_point(builder_scope:Empty)
        }

        // @@protoc_insertion_point(class_scope:Empty)
        private static final ServerOuterClass.Empty DEFAULT_INSTANCE;

        static {
            DEFAULT_INSTANCE = new ServerOuterClass.Empty();
        }

        public static ServerOuterClass.Empty getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        private static final Parser<Empty> PARSER =
                new AbstractParser<Empty>() {
                    public Empty parsePartialFrom(
                            CodedInputStream input, ExtensionRegistryLite extensionRegistry)
                            throws InvalidProtocolBufferException {
                        return new Empty(input, extensionRegistry);
                    }
                };

        public static Parser<Empty> parser() {
            return PARSER;
        }

        @Override
        public Parser<Empty> getParserForType() {
            return PARSER;
        }

        public ServerOuterClass.Empty getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
        }
    }

    private static final Descriptors.Descriptor internal_static_Payload_descriptor;
    private static final GeneratedMessageV3.FieldAccessorTable
            internal_static_Payload_fieldAccessorTable;
    private static final Descriptors.Descriptor internal_static_Empty_descriptor;
    private static final GeneratedMessageV3.FieldAccessorTable
            internal_static_Empty_fieldAccessorTable;

    public static Descriptors.FileDescriptor getDescriptor() {
        return descriptor;
    }

    private static Descriptors.FileDescriptor descriptor;

    static {
        String[] descriptorData = {
            "\n\014server.proto\"\027\n\007Payload\022\014\n\004data\030\001 \001(\014\""
                    + "\007\n\005Empty2=\n\006Server\022\030\n\004tell\022\010.Payload\032\006.E"
                    + "mpty\022\031\n\003ask\022\010.Payload\032\010.PayloadB#\n!org.a"
                    + "pache.flink.runtime.rpc.grpcb\006proto3"
        };
        Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
                new Descriptors.FileDescriptor.InternalDescriptorAssigner() {
                    public ExtensionRegistry assignDescriptors(Descriptors.FileDescriptor root) {
                        descriptor = root;
                        return null;
                    }
                };
        Descriptors.FileDescriptor.internalBuildGeneratedFileFrom(
                descriptorData, new Descriptors.FileDescriptor[] {}, assigner);
        internal_static_Payload_descriptor = getDescriptor().getMessageTypes().get(0);
        internal_static_Payload_fieldAccessorTable =
                new GeneratedMessageV3.FieldAccessorTable(
                        internal_static_Payload_descriptor,
                        new String[] {
                            "Data",
                        });
        internal_static_Empty_descriptor = getDescriptor().getMessageTypes().get(1);
        internal_static_Empty_fieldAccessorTable =
                new GeneratedMessageV3.FieldAccessorTable(
                        internal_static_Empty_descriptor, new String[] {});
    }

    // @@protoc_insertion_point(outer_class_scope)
}
